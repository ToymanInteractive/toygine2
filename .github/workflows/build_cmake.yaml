name: CMake

on:
  workflow_call:

permissions: {}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux Ninja
            os: ubuntu-latest
            run_test: "true"
            cmake_preset: linux-ninja-release

          - name: macOS XCode
            os: macos-15
            run_test: "true"
            cmake_preset: macos-xcode

          - name: macOS Ninja
            os: macos-15
            run_test: "true"
            cmake_preset: macos-ninja-release
            cpack_type: RelWithDebInfo
            cpack_extension: tar.gz

          - name: Windows MSVC
            os: windows-2025
            run_test: "true"
            cmake_preset: windows-msvc

          - name: Windows MSVC x86
            os: windows-2025
            run_test: "true"
            cmake_preset: windows-msvc-x86

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          submodules: recursive

      - name: Prepare CI
        run: |
          if [[ "${{ matrix.os }}" =~ "windows" ]]; then
            MSVC_INSTALL_PATH=$(vswhere -latest -property installationPath)
            echo "MSVC_INSTALL_PATH = $MSVC_INSTALL_PATH"

            echo "Installed toolset versions:"
            ls -vr "$MSVC_INSTALL_PATH/VC/Tools/MSVC"

            TOOLS_DIR=$(ls -vr "$MSVC_INSTALL_PATH/VC/Tools/MSVC/" | head -1)
            echo "TOOLS_DIR = $TOOLS_DIR"

            DUMPBIN_PATH="$MSVC_INSTALL_PATH/VC/Tools/MSVC/$TOOLS_DIR/bin/Hostx64/x64/dumpbin.exe"
            echo "DUMPBIN_PATH = $DUMPBIN_PATH"
          elif [[ "${{ matrix.os }}" =~ "macos" ]]; then
            # Prefer the desired version if it exists, otherwise keep the default.
            if [ -d "/Applications/Xcode_26.0.app" ]; then
              sudo xcode-select -s /Applications/Xcode_26.0.app
            fi
          elif [[ "${{ matrix.os }}" =~ "ubuntu" ]]; then
            sudo apt-get update -qq
            sudo apt-get install -y gcc-14 g++-14
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          fi

      - name: Setup MSVC dev command prompt
        if: ${{ contains(matrix.cmake_preset, 'msvc') }}
        uses: TheMrMilchmann/setup-msvc-dev@v4.0.0
        with:
          arch: ${{ contains(matrix.cmake_preset, 'x86') && 'x86' || 'x64' }}

      - name: Configure
        run: |
          cmake \
            -DTOYGINE_BUILD_TESTS=$([ "${{ matrix.run_test }}" = "true" ] && echo ON || echo OFF) \
            --preset ${{ matrix.cmake_preset }}

      - name: Build
        run: |
          cmake --build --preset ${{ matrix.cmake_preset }}

      - name: Test
        if: ${{ matrix.run_test }}
        run: |
          ctest --preset ${{ matrix.cmake_preset }}

  unit-test:
    name: Collect unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          submodules: recursive

      - name: Prepare CI
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y lcov

      - name: Configure
        run: |
          cmake -DTOYGINE_BUILD_TESTS=ON -DENABLE_CODE_COVERAGE=ON --preset linux-ninja-debug

      - name: Collect JUnit
        run: |
          cmake --build --preset linux-ninja-debug
          ctest --preset linux-ninja-debug

      - name: Upload JUnit report to Codecov
        uses: codecov/test-results-action@v1.1.1
        with:
          files: out/junit/linux-ninja-debug.xml
          flags: units
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Collect coverage
        run: |
          cmake --build --preset linux-ninja-debug --target unit_tests_coverage

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5.5.1
        with:
          disable_search: true
          files: out/build/linux-ninja-debug/unit_tests_coverage.info
          flags: units
          token: ${{ secrets.CODECOV_TOKEN }}
