//
// Copyright (c) 2025 by Toyman Interactive
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and / or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
/*
  \file   core.hpp
  \brief  toygine core part united header
*/

#ifndef INCLUDE_CORE_HPP_
#define INCLUDE_CORE_HPP_

#include <cstdint>
#include <cstring>
#include <cuchar>

//----------------------------------------------------------------------------------------------------------------------

//==============================
//  Target OS
//==============================

/// Microsoft Windows Desktop xp, vista, 7, 8, 8.1 etc...
#define OS_WINDOWS 0x1000

/// GNU Linux
#define OS_LINUX 0x2000

/// Apple macOS
#define OS_MAC_OS 0x3000

/// Apple iOS
#define OS_IOS 0x3100

/// Google Android
#define OS_ANDROID 0x4000

/// Nintendo GameBoy Advance
#define OS_GBA 0x5000

/// Nintendo DS
#define OS_NDS 0x6000

/// Nintendo 3DS
#define OS_3DS 0x7000

/// Nintendo Switch
#define OS_SWITCH 0x8000

//==============================
//  ProcessorType
//==============================

/// Intel CPU 32 bit code
#define CPU_INTEL_x86 0x1020

/// Intel CPU 64 bit code
#define CPU_INTEL_x64 0x1040

/// ARM CPU 32 bit code
#define CPU_ARM_32 0x2020

/// ARM CPU 64 bit code
#define CPU_ARM_64 0x2040

//----------------------------------------------------------------------------------------------------------------------

#undef TARGET_OS
#undef TARGET_CPU

#include "@TARGET_PLATFORM_CONFIG_HEADER@"

namespace toygine {
  /*!
    \brief Returns the size of an array.

    This is a compile time helper function that returns the size of an array.
    The size of the array is inferred from the parameter type, which is a reference to an array of length N.
  */
  template <typename T, std::size_t N>
  consteval std::size_t ArraySize(T (&)[N]) {
    return N;
  }

#if 1
/*!
  \def TOY_UNUSED(identifier)
  \brief Suppresses compiler warnings about unused variables or functions.

  This macro is used to ignore identifiers that are not used in the code, but are still declared for some reason.

  \param identifier The identifier to ignore.

  \note This macro does not change the behavior of the program.
  \note This macro is used to suppress compiler warnings about unused variables or functions.
*/
#define TOY_UNUSED(identifier)
#else
#define TOY_UNUSED(identifier) identifier
#endif

  //--------------------------------------------------------------------------------------------------------------------

  namespace assertion {

    using AssertCallback = bool (*)(const char *);
    using StackWalkCallback = void (*)(const char *);

    void initialize(); //!< Initialize exception handling

    void deInitialize(); //!< Shutdown exception handling

    void setCallback(AssertCallback assertCallback,
                     StackWalkCallback stackWalkCallback); //!< Set assertion callback procedure

#ifdef _DEBUG

    void assertion(const char * code, const char * message, const char * fileName, const char * functionName,
                   std::size_t lineNumber); //!< Show message & raise assertion exception

#else // _DEBUG

    inline void assertion(const char * TOY_UNUSED(code), const char * TOY_UNUSED(message),
                          const char * TOY_UNUSED(fileName), const char * TOY_UNUSED(functionName),
                          std::size_t TOY_UNUSED(lineNumber)) {}

#endif // _DEBUG

  } // namespace assertion

  //--------------------------------------------------------------------------------------------------------------------

  static const std::size_t wcharInUtf8MaxSize = 3; /// Maximum UTF-8 bytes for BMP characters

  /*!
    \brief Converts a Unicode UTF-8 encoded string to a wide character string.

    This function translates a UTF-8 encoded source string into a wide character string stored in the destination
    buffer. The conversion stops when the specified number of characters have been converted or the destination buffer
    is filled. The destination string is null-terminated.

    \param dest     A pointer to the destination buffer where the converted wide character string will be stored.
    \param destSize The size of the destination buffer.
    \param src      A pointer to the source UTF-8 encoded string.
    \param count    The number of characters to convert from the source string.

    \return A pointer to the destination wide character string, or nullptr if the destination buffer is invalid.
  */
  wchar_t * utf8toWChar(wchar_t * dest, std::size_t destSize, char const * src, std::size_t count);

  /*!
    \brief Converts a Unicode UTF-8 encoded string to a wide character string.

    This function translates a UTF-8 encoded source string into a wide character string stored in the destination
    buffer. The conversion stops when the specified number of characters have been converted or the destination buffer
    is filled. The destination string is null-terminated.

    \param dest     A pointer to the destination buffer where the converted wide character string will be stored.
    \param destSize The size of the destination buffer.
    \param src      A pointer to the source UTF-8 encoded string.

    \return A pointer to the destination wide character string, or nullptr if the destination buffer is invalid.
  */
  inline wchar_t * utf8toWChar(wchar_t * dest, std::size_t destSize, char const * src);

  /*!
    \brief Converts a Unicode UTF-8 encoded string to a wide character string.

    This function translates a UTF-8 encoded source string into a wide character string stored in the destination
    buffer. The conversion stops when the specified number of characters have been converted or the destination buffer
    is filled. The destination string is null-terminated.

    \param dest     A pointer to the destination buffer where the converted wide character string will be stored.
    \param destSize The size of the destination buffer.
    \param src      A reference to a class with null-terminated UTF-8 encoded string.

    \return A pointer to the destination wide character string, or nullptr if the destination buffer is invalid.
  */
  template <typename stringType>
  inline wchar_t * utf8toWChar(wchar_t * dest, std::size_t destSize, stringType const & src);

  /*!
    \brief Converts a Unicode wide character string to a UTF-8 encoded string.

    This function translates a source wide character string into a UTF-8 encoded string stored in the destination
    buffer. The conversion stops when the source string is fully converted, or the destination buffer is filled. The
    destination string is null-terminated.

  \param dest     A pointer to the destination buffer where the converted UTF-8 encoded string will be stored.
  \param destSize The size of the destination buffer.
  \param src      A pointer to the source wide character string.

  \return A pointer to the destination UTF-8 encoded string, or nullptr if the destination buffer is invalid.
*/
  char * wcharToUtf8(char * dest, std::size_t destSize, wchar_t const * src);

} // namespace toygine

#include "core_inline.hpp"

#endif // INCLUDE_CORE_HPP_
