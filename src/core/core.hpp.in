//
// Copyright (c) 2025 by Toyman Interactive
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and / or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
/*
  \file   core.hpp
  \brief  toygine core part united header
*/

#ifndef INCLUDE_CORE_HPP_
#define INCLUDE_CORE_HPP_

#include <cstdint>
#include <cstring>
#include <cuchar>

//----------------------------------------------------------------------------------------------------------------------

//==============================
//  Target OS
//==============================

/// Microsoft Windows Desktop xp, vista, 7, 8, 8.1 etc...
#define OS_WINDOWS 0x1000

/// GNU Linux
#define OS_LINUX 0x2000

/// Apple macOS
#define OS_MAC_OS 0x3000

/// Apple iOS
#define OS_IOS 0x3100

/// Google Android
#define OS_ANDROID 0x4000

/// Nintendo GameBoy Advance
#define OS_GBA 0x5000

/// Nintendo DS
#define OS_NDS 0x6000

/// Nintendo 3DS
#define OS_3DS 0x7000

/// Nintendo Switch
#define OS_SWITCH 0x8000

//==============================
//  ProcessorType
//==============================

/// Intel CPU 32 bit code
#define CPU_INTEL_x86 0x1020

/// Intel CPU 64 bit code
#define CPU_INTEL_x64 0x1040

/// ARM CPU 32 bit code
#define CPU_ARM_32 0x2020

/// ARM CPU 64 bit code
#define CPU_ARM_64 0x2040

//----------------------------------------------------------------------------------------------------------------------

#undef TARGET_OS
#undef TARGET_CPU

#include "@TOYGINE_TARGET_PLATFORM_CONFIG_HEADER@"

namespace toygine {
/*!
  \brief Returns the size of an array.

  This is a compile time helper function that returns the size of an array. The size of the array is inferred from the
  parameter type, which is a reference to an array of length N.
*/
template <typename T, std::size_t N>
consteval std::size_t ArraySize(T (&)[N]) {
  return N;
}

#if 1
/*!
  \def TOY_UNUSED(identifier)
  \brief Suppresses compiler warnings about unused variables or functions.

  This macro is used to ignore identifiers that are not used in the code, but are still declared for some reason.

  \param identifier The identifier to ignore.

  \note This macro does not change the behavior of the program.
  \note This macro is used to suppress compiler warnings about unused variables or functions.
*/
#define TOY_UNUSED(identifier)
#else
#define TOY_UNUSED(identifier) identifier
#endif

//--------------------------------------------------------------------------------------------------------------------

namespace assertion {

using AssertionCallback = bool (*)(const char *);
using StackWalkCallback = void (*)(const char *);

/*!
  \brief Initializes the assertion system.

  \sa deinitialize()
*/
void initialize();

/*!
  \brief Shutdown the assertion system.

  \sa initialize()
*/
void deInitialize();

/*!
  \brief Sets the assertion and stack walk callbacks.

  The assertion callback is called when an assertion is triggered. The callback is passed the assertion string and
  should return true if the assertion should be ignored, false otherwise.

  The stack walk callback is called to print the stack trace. The callback is passed the constructed string.

  \param assertionCallback The assertion callback.
  \param stackWalkCallback The stack walk callback.
*/
void setCallbacks(AssertionCallback assertionCallback, StackWalkCallback stackWalkCallback);

#ifdef _DEBUG

void assertion(const char * code, const char * message, const char * fileName, const char * functionName,
               std::size_t lineNumber);

#else // _DEBUG

inline void assertion(const char * TOY_UNUSED(code), const char * TOY_UNUSED(message),
                      const char * TOY_UNUSED(fileName), const char * TOY_UNUSED(functionName),
                      std::size_t TOY_UNUSED(lineNumber)) {}

#endif // _DEBUG

} // namespace assertion

//--------------------------------------------------------------------------------------------------------------------

/// Maximum UTF-8 bytes for BMP characters
static const std::size_t wcharInUtf8MaxSize = 3;

/*!
  \brief Converts a Unicode UTF-8 encoded string to a wide character string.

  This function translates a UTF-8 encoded source string into a wide character string stored in the destination buffer.
  The conversion stops when the specified number of characters have been converted or the destination buffer is filled.
  The destination string is null-terminated.

  \param dest     A pointer to the destination buffer where the converted wide character string will be stored.
  \param destSize The size of the destination buffer.
  \param src      A pointer to the source UTF-8 encoded string.
  \param count    The number of characters to convert from the source string.

  \return A pointer to the destination wide character string, or nullptr if the destination buffer is invalid.
*/
wchar_t * utf8toWChar(wchar_t * dest, std::size_t destSize, char const * src, std::size_t count);

/*!
  \brief Converts a Unicode UTF-8 encoded string to a wide character string.

  This function translates a UTF-8 encoded source string into a wide character string stored in the destination buffer.
  The conversion stops when the specified number of characters have been converted or the destination buffer is filled.
  The destination string is null-terminated.

  \param dest     A pointer to the destination buffer where the converted wide character string will be stored.
  \param destSize The size of the destination buffer.
  \param src      A pointer to the source UTF-8 encoded string.

  \return A pointer to the destination wide character string, or nullptr if the destination buffer is invalid.
*/
inline wchar_t * utf8toWChar(wchar_t * dest, std::size_t destSize, char const * src);

/*!
  \brief Converts a Unicode UTF-8 encoded string to a wide character string.

  This function translates a UTF-8 encoded source string into a wide character string stored in the destination buffer.
  The conversion stops when the specified number of characters have been converted or the destination buffer is filled.
  The destination string is null-terminated.

  \param dest     A pointer to the destination buffer where the converted wide character string will be stored.
  \param destSize The size of the destination buffer.
  \param src      A reference to a class with null-terminated UTF-8 encoded string.

  \return A pointer to the destination wide character string, or nullptr if the destination buffer is invalid.
*/
template <typename stringType>
inline wchar_t * utf8toWChar(wchar_t * dest, std::size_t destSize, stringType const & src);

/*!
  \brief Converts a Unicode wide character string to a UTF-8 encoded string.

  This function translates a source wide character string into a UTF-8 encoded string stored in the destination buffer.
  The conversion stops when the source string is fully converted, or the destination buffer is filled. The destination
  string is null-terminated.

  \param dest     A pointer to the destination buffer where the converted UTF-8 encoded string will be stored.
  \param destSize The size of the destination buffer.
  \param src      A pointer to the source wide character string.

  \return A pointer to the destination UTF-8 encoded string, or nullptr if the destination buffer is invalid.
*/
char * wcharToUtf8(char * dest, std::size_t destSize, wchar_t const * src);

/*!
  \brief Returns the number of Unicode characters in a UTF-8 encoded string.

  This function counts the number of Unicode characters in a UTF-8 encoded string. It stops counting when the null
  character is encountered or the end of the string is reached.

  \param str A pointer to the UTF-8 encoded string.

  \return The number of Unicode characters in the string, or 0 if the string is invalid.
*/
std::size_t utf8len(const char * str);

/*!
  \brief Reverses a given string in-place.

  This function will reverse a given string in-place. It can be used to reverse a string of a given length, or to
  reverse a null-terminated string.

  \param str   The string to reverse.
  \param count The length of the string to reverse.

  \return A pointer to the reversed string.
*/
char * reverseString(char * str, std::size_t count = 0);

/*!
  \brief Converts an integer value to a string representation.

  This function converts a given integer value into its string representation, storing the result in the provided
  destination buffer.

  \param dest     The destination buffer where the converted string is stored.
  \param destSize The size of the destination buffer.
  \param value    The integer value to be converted.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
        destination buffer size is 1, only a null terminator is written. The function reverses the string in-place.
*/
char * itoa(char * dest, std::size_t destSize, std::int8_t value);

/*!
  \brief Converts an integer value to a string representation.

  This function converts a given integer value into its string representation, storing the result in the provided
  destination buffer.

  \param dest     The destination buffer where the converted string is stored.
  \param destSize The size of the destination buffer.
  \param value    The integer value to be converted.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
        destination buffer size is 1, only a null terminator is written. The function reverses the string in-place.
*/
char * itoa(char * dest, std::size_t destSize, std::int16_t value);

/*!
  \brief Converts an integer value to a string representation.

  This function converts a given integer value into its string representation, storing the result in the provided
  destination buffer.

  \param dest     The destination buffer where the converted string is stored.
  \param destSize The size of the destination buffer.
  \param value    The integer value to be converted.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
        destination buffer size is 1, only a null terminator is written. The function reverses the string in-place.
*/
char * itoa(char * dest, std::size_t destSize, std::int32_t value);

/*!
  \brief Converts an integer value to a string representation.

  This function converts a given integer value into its string representation, storing the result in the provided
  destination buffer.

  \param dest     The destination buffer where the converted string is stored.
  \param destSize The size of the destination buffer.
  \param value    The integer value to be converted.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
        destination buffer size is 1, only a null terminator is written. The function reverses the string in-place.
*/
char * itoa(char * dest, std::size_t destSize, std::int64_t value);

/*!
  \brief Converts an unsigned integer to a string representation in the specified base.

  This function converts a given unsigned integer value into its string representation in the specified base,
  storing the result in the provided destination buffer.

  \param dest     The destination buffer where the converted string is stored.
  \param destSize The size of the destination buffer.
  \param value    The unsigned integer value to be converted.
  \param base     The numerical base for the conversion, e.g., 10 for decimal, 16 for hexadecimal.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
        destination buffer size is 1, only a null terminator is written. The base must be between 2 and 36 inclusive.
*/
char * itoa(char * dest, std::size_t destSize, std::uint8_t value, unsigned base);

/*!
  \brief Converts an unsigned integer to a string representation in the specified base.

  This function converts a given unsigned integer value into its string representation in the specified base,
  storing the result in the provided destination buffer.

  \param dest     The destination buffer where the converted string is stored.
  \param destSize The size of the destination buffer.
  \param value    The unsigned integer value to be converted.
  \param base     The numerical base for the conversion, e.g., 10 for decimal, 16 for hexadecimal.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
        destination buffer size is 1, only a null terminator is written. The base must be between 2 and 36 inclusive.
*/
char * itoa(char * dest, std::size_t destSize, std::uint16_t value, unsigned base);

/*!
  \brief Converts an unsigned integer to a string representation in the specified base.

  This function converts a given unsigned integer value into its string representation in the specified base,
  storing the result in the provided destination buffer.

  \param dest     The destination buffer where the converted string is stored.
  \param destSize The size of the destination buffer.
  \param value    The unsigned integer value to be converted.
  \param base     The numerical base for the conversion, e.g., 10 for decimal, 16 for hexadecimal.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
        destination buffer size is 1, only a null terminator is written. The base must be between 2 and 36 inclusive.
*/
char * itoa(char * dest, std::size_t destSize, std::uint32_t value, unsigned base);

/*!
  \brief Converts an unsigned integer to a string representation in the specified base.

  This function converts a given unsigned integer value into its string representation in the specified base,
  storing the result in the provided destination buffer.

  \param dest     The destination buffer where the converted string is stored.
  \param destSize The size of the destination buffer.
  \param value    The unsigned integer value to be converted.
  \param base     The numerical base for the conversion, e.g., 10 for decimal, 16 for hexadecimal.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
        destination buffer size is 1, only a null terminator is written. The base must be between 2 and 36 inclusive.
*/
char * itoa(char * dest, std::size_t destSize, std::uint64_t value, unsigned base);

/*!
  \brief Converts a floating-point number to its string representation in a specified precision.

  This function converts a given floating-point number into its string representation, storing the result in the
  provided destination buffer.

  \param dest      The destination buffer where the converted string is stored.
  \param destSize  The size of the destination buffer.
  \param value     The floating-point number to be converted.
  \param precision The precision (digits after the decimal point). For IEEE-754 f32, practical precision is ~7–9 digits.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
  destination buffer size is 1, only a null terminator is written. The function does not support subnormals.
*/
char * ftoa(char * dest, std::size_t destSize, float value, std::size_t precision = 7);

/*!
  \brief Converts a floating-point number to its string representation in a specified precision.

  This function converts a given floating-point number into its string representation, storing the result in the
  provided destination buffer.

  \param dest      The destination buffer where the converted string is stored.
  \param destSize  The size of the destination buffer.
  \param value     The floating-point number to be converted.
  \param precision The precision (digits after the decimal point). For IEEE-754 f64, practical precision is ~15–17
                   digits.

  \return A pointer to the destination buffer containing the converted string.

  \note The function assumes that the destination buffer is large enough to hold the converted string. If the
  destination buffer size is 1, only a null terminator is written. The function does not support subnormals.
*/
char * ftoa(char * dest, std::size_t destSize, double value, std::size_t precision = 15);

/*!
  \brief Format number string.

  This function inserts a grouping separator (e.g., a comma or a space) into a number string. The separator is inserted
  every three digits, starting from the right. The function assumes that the destination buffer is large enough to hold
  the modified string.

  \param buffer            The destination buffer where the modified string is stored.
  \param bufferSize        The size of the destination buffer.
  \param groupingSeparator The grouping separator to be inserted into the string.

  \note The function does not check if the destination buffer is large enough to hold the modified string. If the buffer
        is too small, the function will not insert any separators and will return without modifying the buffer.
*/
void formatNumberString(char * buffer, std::size_t bufferSize, char const * groupingSeparator);

//--------------------------------------------------------------------------------------------------------------------

//! template string of chars, wrapper to char[]
template <std::size_t allocatedSize>
class FixString {
public:
  /*!
    \brief Default constructor for FixString class.

    This is the default constructor for the FixString class. It initializes a FixString object with a size of 0 and a
    null character in the data array.

    \pre The allocated size must be bigger than zero.

    \post The size of the FixString object is set to 0 and the data array contains a null character.
  */
  constexpr inline FixString() noexcept;

  /*!
    \brief Destructor for the FixString class.

    This destructor cleans up the FixString object. Since FixString does not manage dynamic memory, no special cleanup
    is required. The destructor ensures that any necessary invariants or assertions related to the allocatedSize are
    enforced.

    \pre The allocated size must be greater than zero.
  */
  constexpr inline ~FixString() noexcept;

  /*!
    \brief Copy constructor for FixString class.

    This is the copy constructor for the FixString class. It initializes a FixString object by copying the data from
    another FixString object.

    \param string The source FixString object to copy data from.

    \pre The allocated size of both FixString objects must be greater than zero.

    \post A new FixString object is created with the contents of the source FixString object.
  */
  constexpr inline FixString(const FixString<allocatedSize> & string) noexcept;

  /*!
    \brief Constructor for FixString class with different allocated sizes.

    This constructor initializes a FixString object by copying the data from another FixString object with a potentially
    different allocated size.

    \tparam allocatedSize2 The allocated size of the source FixString object.

    \param string The source FixString object to copy data from.

    \pre The allocated size of both FixString objects must be greater than zero.

    \post A new FixString object is created with the contents of the source FixString object.
  */
  template <std::size_t allocatedSize2>
  constexpr inline explicit FixString(const FixString<allocatedSize2> & string) noexcept;

  /*!
    \brief Constructor for FixString class with a C string.

    This constructor initializes a FixString object with a C string.

    \param string The C string to copy data from.

    \pre The allocated size must be bigger than zero.

    \pre The source string must not be null.

    \post A new FixString object is created with the contents of the source string.
  */
  constexpr explicit inline FixString(const char * string) noexcept;

  /*!
    \brief Constructor for FixString class with a character and a count.

    This constructor initializes a FixString object with a character repeated the given number of times.

    \param symbol The character to repeat.
    \param count  The number of times to repeat the character.

    \pre The allocated size must be bigger than zero.

    \post A new FixString object is created with the contents of the character repeated the given number of times.
  */
  constexpr inline explicit FixString(char symbol, std::size_t count = 1) noexcept;

  /*!
    \brief Copy assignment operator for FixString class.

    This operator assigns the contents of another FixString object with the same allocated size to this FixString object.

    \param string The source FixString object to copy data from.

    \return A reference to this FixString object after assignment.

    \pre The allocated size of both FixString objects must be greater than zero.
    \pre The source FixString object must be valid.

    \post This FixString object contains the same data as the source FixString object.
  */
  constexpr inline FixString<allocatedSize> & operator=(const FixString<allocatedSize> & string) noexcept;

  /*!
    \brief Template assignment operator for FixString class with different allocated sizes.

    This operator assigns the contents of another FixString object with a potentially different allocated size to this FixString object.

    \tparam allocatedSize2 The allocated size of the source FixString object.

    \param string The source FixString object to copy data from.

    \return A reference to this FixString object after assignment.

    \pre The allocated size of both FixString objects must be greater than zero.
    \pre The source FixString object must be valid.
    \pre The source string length must not exceed this object's allocated size.

    \post This FixString object contains the same data as the source FixString object, truncated if necessary.
  */
  template <std::size_t allocatedSize2>
  constexpr inline FixString<allocatedSize> & operator=(const FixString<allocatedSize2> & string) noexcept;

  /*!
    \brief C string assignment operator for FixString class.

    This operator assigns the contents of a C string to this FixString object.

    \param string The C string to copy data from.

    \return A reference to this FixString object after assignment.

    \pre The allocated size must be greater than zero.
    \pre The source string must not be null.
    \pre The source string length must not exceed this object's allocated size.

    \post This FixString object contains the same data as the source C string, truncated if necessary.
  */
  constexpr inline FixString<allocatedSize> & operator=(const char * string) noexcept;

  /*!
    \brief Character assignment operator for FixString class.

    This operator assigns a single character to this FixString object, creating a string of length 1.

    \param symbol The character to assign.

    \return A reference to this FixString object after assignment.

    \pre The allocated size must be greater than zero.

    \post This FixString object contains only the specified character with a size of 1.
  */
  constexpr inline FixString<allocatedSize> & operator=(char symbol) noexcept;

  /*!
    \brief Copy assign method for FixString class.

    This method assigns the contents of another FixString object with the same allocated size to this FixString object.

    \param string The source FixString object to copy data from.

    \return A reference to this FixString object after assignment.

    \pre The allocated size of both FixString objects must be greater than zero.
    \pre The source FixString object must be valid.

    \post This FixString object contains the same data as the source FixString object.
  */
  constexpr inline FixString<allocatedSize> & assign(const FixString<allocatedSize> & string) noexcept;

  /*!
    \brief Template assign method for FixString class with different allocated sizes.

    This method assigns the contents of another FixString object with a potentially different allocated size to this FixString object.

    \tparam allocatedSize2 The allocated size of the source FixString object.

    \param string The source FixString object to copy data from.

    \return A reference to this FixString object after assignment.

    \pre The allocated size of both FixString objects must be greater than zero.
    \pre The source FixString object must be valid.
    \pre The source string length must not exceed this object's allocated size.

    \post This FixString object contains the same data as the source FixString object, truncated if necessary.
  */
  template <std::size_t allocatedSize2>
  constexpr inline FixString<allocatedSize> & assign(const FixString<allocatedSize2> & string) noexcept;

  /*!
    \brief C string assign method for FixString class.

    This method assigns the contents of a C string to this FixString object.

    \param string The C string to copy data from.

    \return A reference to this FixString object after assignment.

    \pre The allocated size must be greater than zero.
    \pre The source string must not be null.
    \pre The source string length must not exceed this object's allocated size.

    \post This FixString object contains the same data as the source C string, truncated if necessary.
  */
  constexpr inline FixString<allocatedSize> & assign(const char * string) noexcept;

  /*!
    \brief Character fill assign method for FixString class.

    This method assigns a character repeated the specified number of times to this FixString object.

    \param symbol The character to repeat.
    \param count The number of times to repeat the character.

    \return A reference to this FixString object after assignment.

    \pre The allocated size must be greater than zero.
    \pre The count must not exceed this object's allocated size.

    \post This FixString object contains the specified character repeated count times.
  */
  constexpr inline FixString<allocatedSize> & assign(char symbol, std::size_t count) noexcept;

  /*!
    \brief Access a character in the string at a given offset.

    \param offset The offset of the character to access in the string.

    \return A reference to the character at the specified offset.

    \pre The offset must be within the bounds of the string.

    \post The character at the specified offset is returned.
  */
  constexpr inline char & at(std::size_t offset) noexcept;

  /*!
    \brief Access a character in the string at a given offset.

    \param offset The offset of the character to access in the string.

    \return A const reference to the character at the specified offset.

    \pre The offset must be within the bounds of the string.

    \post The character at the specified offset is returned.
  */
  constexpr inline const char & at(std::size_t offset) const noexcept;

  /*!
    \brief Access a character in the string at a given offset.

    \param offset The offset of the character to access in the string.

    \return A reference to the character at the specified offset.

    \pre The offset must be within the bounds of the string.

    \post The character at the specified offset is returned.
  */
  constexpr inline char & operator[](std::size_t offset) noexcept;

  /*!
    \brief Access a character in the string at a given offset.

    \param offset The offset of the character to access in the string.

    \return A const reference to the character at the specified offset.

    \pre The offset must be within the bounds of the string.

    \post The character at the specified offset is returned.
  */
  constexpr inline const char & operator[](std::size_t offset) const noexcept;

  /*!
    \brief Return a pointer to the data of the string.

    \return A pointer to the data of the string.
  */
  constexpr inline char * data() noexcept;

  /*!
    \brief Return a pointer to the data of the string.

    \return A pointer to the data of the string.
  */
  constexpr inline const char * data() const noexcept;

  constexpr inline FixString<allocatedSize> & operator+=(const FixString<allocatedSize> & string) noexcept;
  template <std::size_t allocatedSize2>
  constexpr inline FixString<allocatedSize> & operator+=(const FixString<allocatedSize2> & string) noexcept;
  constexpr inline FixString<allocatedSize> & operator+=(const char * string) noexcept;
  constexpr inline FixString<allocatedSize> & operator+=(char symbol) noexcept;

  /*!
    \brief Concatenates two FixString objects and returns the result.

    This operator creates a new FixString object by concatenating the current FixString object with another provided
    FixString object. The resulting FixString will contain the contents of both strings, and its size will be the sum of
    the sizes of the two operands.

    \param string The FixString object to concatenate with the current FixString object.

    \return A new FixString object representing the concatenation of the current FixString and the provided FixString
            object.

    \pre The sum of the sizes of the two FixString objects must be less than the allocated size.
    \pre The allocated size of both FixString objects must be greater than zero.

    \post A new FixString object is created with the contents of both FixString objects.
  */
  constexpr inline FixString<allocatedSize> operator+(const FixString<allocatedSize> & string) const noexcept;

  /*!
    \brief Concatenates two FixString objects and returns the result.

    This operator creates a new FixString object by concatenating the current FixString object with another provided
    FixString object. The resulting FixString will contain the contents of both strings, and its size will be the sum of
    the sizes of the two operands.

    \param string The FixString object to concatenate with the current FixString object.

    \return A new FixString object representing the concatenation of the current FixString and the provided FixString
            object.

    \pre The sum of the sizes of the two FixString objects must be less than the allocated size.
    \pre The allocated size of both FixString objects must be greater than zero.

    \post A new FixString object is created with the contents of both FixString objects.
  */
  template <std::size_t allocatedSize2>
  constexpr inline FixString<allocatedSize> operator+(const FixString<allocatedSize2> & string) const noexcept;

  /*!
    \brief Concatenates two strings and returns the result.

    This operator creates a new FixString object by concatenating the current FixString object with a C string. The
    resulting FixString will contain the contents of both strings, and its size will be the sum of the sizes of the two
    operands.

    \param string The C string to concatenate with the current FixString object.

    \return A new FixString object representing the concatenation of the current FixString and the provided C string.

    \pre The sum of the sizes of the two strings must be less than the allocated size.
    \pre The allocated size must be greater than zero.

    \post A new FixString object is created with the contents of both strings.
  */
  constexpr inline FixString<allocatedSize> operator+(const char * string) const noexcept;

  /*!
    \brief Concatenates this FixString object with a character.

    This operator adds a character to the end of the FixString object and returns the new FixString object.

    \param symbol The character to add to the end of the FixString object.

    \pre The allocated size of the FixString object must be greater than zero.
    \pre The size of the FixString object plus one must be less than the allocated size.

    \post A new FixString object is created with the contents of the original FixString object plus the given character.
  */
  constexpr inline FixString<allocatedSize> operator+(char symbol) const noexcept;

  */

  /*!
    \brief Return a pointer to the C string representation of this FixString object.

    This function returns a pointer to the C string representation of this FixString object. The returned pointer is
    valid until the FixString object is modified or destroyed. The returned string is null terminated and can be used
    with C style string functions.

    \return A pointer to the C string representation of this FixString object.
  */
  constexpr inline const char * c_str() const noexcept;

  /*!
    \brief Returns the size of the string.

    \return The length of the string in characters, excluding the terminating null character.
  */
  constexpr inline std::size_t size() const noexcept;
private:
  char _data[allocatedSize];
  std::size_t _size;
};

} // namespace toygine

#include "core_inline.inl"

#endif // INCLUDE_CORE_HPP_
