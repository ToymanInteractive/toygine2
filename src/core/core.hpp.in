//
// Copyright (c) 2025 by Toyman Interactive
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and / or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
/*
  \file   core.hpp
  \brief  toygine core part united header
*/

#ifndef INCLUDE_CORE_HPP_
#define INCLUDE_CORE_HPP_

#include <algorithm>
#include <array>
#include <concepts>
#include <cstddef>
#include <cstdint>
#include <cstring>
#include <cuchar>
#include <string>
#include <utility>

//----------------------------------------------------------------------------------------------------------------------

//==============================
//  Target OS
//==============================

/// Microsoft Windows Desktop xp, vista, 7, 8, 8.1 etc...
#define OS_WINDOWS 0x1000

/// GNU Linux
#define OS_LINUX 0x2000

/// Apple macOS
#define OS_MAC_OS 0x3000

/// Apple iOS
#define OS_IOS 0x3100

/// Google Android
#define OS_ANDROID 0x4000

/// Nintendo GameBoy Advance
#define OS_GBA 0x5000

/// Nintendo DS
#define OS_NDS 0x6000

/// Nintendo 3DS
#define OS_3DS 0x7000

/// Nintendo Switch
#define OS_SWITCH 0x8000

//==============================
//  ProcessorType
//==============================

/// Intel CPU 32 bit code
#define CPU_INTEL_x86 0x1020

/// Intel CPU 64 bit code
#define CPU_INTEL_x64 0x1040

/// ARM CPU 32 bit code
#define CPU_ARM_32 0x2020

/// ARM CPU 64 bit code
#define CPU_ARM_64 0x2040

//----------------------------------------------------------------------------------------------------------------------

#undef TARGET_OS
#undef TARGET_CPU

#include "@TOYGINE_TARGET_PLATFORM_CONFIG_HEADER@"

/// @brief Main engine namespace
namespace toygine {
/*!
  \brief Returns the size of an array.

  This is a compile time helper function that returns the size of an array. The size of the array is inferred from the
  parameter type, which is a reference to an array of length N.
*/
template <typename T, std::size_t N>
constexpr std::size_t ArraySize(T (&)[N]) {
  return N;
}

/*!
  \brief Concept defining the requirements for string-like types.

  This concept defines the interface that any type must satisfy to be considered string-like. It requires the type to
  have a size() method that returns a value convertible to std::size_t, and a c_str() method that returns a value
  convertible to const char*.

  (Template parameter T is the type to check for string-like properties.)

  \note Types satisfying this concept can be used with FixString template methods that accept generic string types, such
        as constructors, assignment operators, and various string manipulation methods.

  \note The concept ensures type safety and provides a compile-time guarantee that the required methods exist and return
        compatible types.
*/
template <typename T>
concept StringLike = requires(const T & s) {
  { s.size() } -> std::convertible_to<std::size_t>;
  { s.c_str() } -> std::convertible_to<const char *>;
};

#if 1
/*!
  \def TOY_UNUSED(identifier)
  \brief Suppresses compiler warnings about unused variables or functions.

  This macro is used to ignore identifiers that are not used in the code, but are still declared for some reason.

  \param identifier The identifier to ignore.

  \note This macro does not change the behavior of the program.
  \note This macro is used to suppress compiler warnings about unused variables or functions.
*/
#define TOY_UNUSED(identifier)
#else
#define TOY_UNUSED(identifier) identifier
#endif

//--------------------------------------------------------------------------------------------------------------------

/// @brief Assertion related functions.
namespace assertion {

using AssertionCallback = bool (*)(const char *);
using StackWalkCallback = void (*)(const char *);

/*!
  \brief Initializes the assertion system.

  \sa deinitialize()
*/
void initialize();

/*!
  \brief Shutdown the assertion system.

  \sa initialize()
*/
void deInitialize();

/*!
  \brief Sets the assertion and stack walk callbacks.

  The assertion callback is called when an assertion is triggered. The callback is passed the assertion string and
  should return true if the assertion should be ignored, false otherwise.

  The stack walk callback is called to print the stack trace. The callback is passed the constructed string.

  \param assertionCallback The assertion callback.
  \param stackWalkCallback The stack walk callback.
*/
void setCallbacks(AssertionCallback assertionCallback, StackWalkCallback stackWalkCallback);

#ifdef _DEBUG

void assertion(const char * code, const char * message, const char * fileName, const char * functionName,
               std::size_t lineNumber);

#else // _DEBUG

inline void assertion(const char * TOY_UNUSED(code), const char * TOY_UNUSED(message),
                      const char * TOY_UNUSED(fileName), const char * TOY_UNUSED(functionName),
                      std::size_t TOY_UNUSED(lineNumber)) {}

#endif // _DEBUG

} // namespace assertion

} // namespace toygine

#include "core/constexpr_utils.hpp"
#include "core/fix_string.hpp"
#include "core/utils.hpp"

//----------------------------------------------------------------------------------------------------------------------

#include "core/constexpr_utils.inl"
#include "core/fix_string.inl"
#include "core/utils.inl"

#endif // INCLUDE_CORE_HPP_
